name: grpc win_arm64

on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to build (leave empty for latest commit)
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  GRPC_REPO: https://github.com/grpc/grpc.git
  GRPC_DIR: grpc-repo

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup repository
    outputs:
      commit_sha: ${{ steps.get-commit.outputs.commit_sha }}
      checkout_ref: ${{ steps.get-commit.outputs.checkout_ref }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          
      - name: Determine version information
        id: get-commit
        run: |
          # Clone a shallow copy just to get version info
          git clone --depth 1 ${{ env.GRPC_REPO }} ${{ env.GRPC_DIR }}
          cd ${{ env.GRPC_DIR }}
          
          # Determine what to checkout
          if [ -n "${{ github.event.inputs.version }}" ]; then
            CHECKOUT_REF="${{ github.event.inputs.version }}"
            git fetch --depth 1 origin $CHECKOUT_REF
            git checkout $CHECKOUT_REF
            VERSION_INFO="${{ github.event.inputs.version }}-$(git rev-parse --short HEAD)"
          else
            CHECKOUT_REF="master"
            VERSION_INFO="$(git rev-parse --short HEAD)"
          fi
          
          echo "checkout_ref=${CHECKOUT_REF}" >> $GITHUB_OUTPUT
          echo "commit_sha=${VERSION_INFO}" >> $GITHUB_OUTPUT
          echo "Using checkout ref: ${CHECKOUT_REF}"
          echo "Using version info for artifacts: ${VERSION_INFO}"

  clone_repo:
    needs: [setup]
    runs-on: ubuntu-latest
    name: Clone gRPC repository
    steps:
      - name: Clone gRPC repository
        shell: bash
        run: |
          # Clone at the specific ref determined by the setup job
          git clone ${{ env.GRPC_REPO }} ${{ env.GRPC_DIR }}
          cd ${{ env.GRPC_DIR }}
          git checkout ${{ needs.setup.outputs.checkout_ref }}
          git submodule update --init --recursive

      - name: Upload gRPC repository
        uses: actions/upload-artifact@v4
        with:
          name: grpc-repo-${{ needs.setup.outputs.commit_sha }}
          path: ${{ env.GRPC_DIR }}
          retention-days: 1

  build_wheels:
    needs: [setup, clone_repo]
    name: Build wheel for ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      fail-fast: false
      matrix:
        buildplat:
          - ["windows-11-arm", "win_arm64"]
        python: [["cp313", "3.13"]] #["cp311", "3.11"], ["cp312", "3.12"], 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python[1] }}
          architecture: arm64

      - name: Download gRPC repository
        uses: actions/download-artifact@v4
        with:
          name: grpc-repo-${{ needs.setup.outputs.commit_sha }}
          path: ${{ env.GRPC_DIR }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        with:
          output-dir: wheelhouse
          package-dir: ${{ env.GRPC_DIR }}
        env:
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
          CIBW_BUILD_FRONTEND: 'pip'
          CIBW_PLATFORM: 'windows'
          CIBW_ARCHS: 'ARM64'

      - name: Validate wheel RECORD
        shell: bash -el {0}
        run: |
          python -m pip install wheel
          for whl in $(ls wheelhouse); do wheel unpack wheelhouse/$whl -d /tmp; done

      - uses: actions/upload-artifact@v4
        with:
          name: "grpcio-${{ needs.setup.outputs.commit_sha }}-${{ matrix.buildplat[1] }}-${{ matrix.python[1] }}-${{ matrix.python[0] }}"
          path: ./wheelhouse/*.whl